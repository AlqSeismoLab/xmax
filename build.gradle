import groovy.json.JsonSlurper
import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'application'
    id 'java-library'
}

mainClassName = "com.isti.xmax.XMAX"

/* Get first three version numbers from code.json */
def codeJson = new JsonSlurper().parseText(new File("code.json").text)
// NOTE: codeJson.version is a String[], and any IDE warning here can be safely ignored
def jsonVersion = codeJson.version[0]
/* Get last version number from commit counts */
def lastTagHash = "git rev-list --tags --max-count=1".execute().text
lastTagHash = lastTagHash.substring(0, lastTagHash.length() - 1)
def commitCount = ("git rev-list "+lastTagHash+".. --count").execute().text
commitCount = commitCount.substring(0, commitCount.length() - 1)

version = "$jsonVersion.$commitCount"


sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
       url "http://www.seis.sc.edu/software/maven2"
    }
}

dependencies {
    // this will include seisfile and seedcodec as dependencies, exposed with api tag here
    api project(':asl-java-utils')

    // some library components require xml bindings to function which we'll include explicitly here
    // (in particular stuff related to picks and the jevalresp library)
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3+'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3+'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3+'
    compile group: 'com.sun.activation', name: 'javax.activation', version: '1.2.0'

    compile group: 'org.jfree', name: 'jfreechart', version: '1.0.+'
    compile group: 'org.jfree', name: 'jcommon', version: '1.0.+'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.7'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.5'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    compile group: 'org.jdom', name: 'jdom', version: '1.1'
    compile group: 'edu.emory.mathcs', name: 'JTransforms', version: '2.4'
    compile group: 'log4j', name: 'log4j', version: '1.2.16'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.10'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    compile group: 'edu.iris.dmc', name: 'java-seed', version: '3.8.5'

    compile group: 'uk.me.berndporr', name: 'iirj', version: '1.0'

    compile group: 'edu.sc.seis', name: 'TauP', version: '2.4.5'

//seis.sc.edu maven dependencies

    //FissureIDL is bundled in jevalresp
    //compile group: 'edu.sc.seis', name: 'fissuresIDL', version: '1.0'
    compile (group: 'edu.sc.seis', name: 'fissuresUtil', version: '1.1.5'){
        exclude group: 'jfreechart', module: 'jcommon'
        exclude group: 'jfreechart', module: 'jfreechart'
        exclude group: 'edu.sc.seis', module: 'fissuresIDL'
    }
    compile group: 'xerces', name: 'xml-apis', version: '2.10.0'
    // jevalresp here is what uses the above jaxb stuff
    compile files('./lib/JEvalResp.jar', './lib/ekit-1.4.jar')

    testCompile group: 'junit', name: 'junit', version: '4.+'
}



jar {
    /* Adds all dependent libraries*/
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    manifest {
        attributes 'Implementation-Title': 'XMAX',
                   'Implementation-Version': version,
                   'Main-Class': mainClassName,
                   'Build-Timestamp': new SimpleDateFormat("yyyy.MM.dd").format(new Date())
    }
}

/*Turn off doclint since it is far too strict and breaks the javadoc everytime*/
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task copyJar(type: Copy) {
    from jar
    into rootDir
}

test {
    maxHeapSize = "4096m"
    maxParallelForks = 4
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Result: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, ${result.failedTestCount} " +
                        "failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

gradle.beforeProject {
    println("Perform pre-project setup")
    def sout = new StringBuilder()
    def serr = new StringBuilder()
    println("Updating gitsubmodules")
    def proc = "git submodule update --init --recursive".execute()
    proc.consumeProcessOutput(sout, serr)
    proc.waitFor()
    print sout
    print serr
    sout = new StringBuilder()
    serr = new StringBuilder()
    println("Updating JEvalResp")
    proc = "./jevalresp_setup.bash".execute()
    proc.consumeProcessOutput(sout, serr)
    proc.waitFor()
    print sout
    print serr

    println("Done with pre-project setup")
}

build.dependsOn(copyJar)

javadoc {
    options.memberLevel = JavadocMemberLevel.PRIVATE
}


